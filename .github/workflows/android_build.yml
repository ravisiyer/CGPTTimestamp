name: Android Release Build

on:
  # push:
  #   branches:
  #     - main # Or your default branch, e.g., 'master'
  workflow_dispatch: 

jobs:
  build:
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' 
          cache: 'npm'

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Recommended for Android builds
          java-version: '17' # Recommended Java version for Android development

      - name: Install dependencies
        run: npm install

      - name: Generate Android project files (expo prebuild)
        # This command creates or updates the native 'android' directory, including build.gradle.
        run: npx expo prebuild --clean --platform android --non-interactive

      - name: Run Expo Doctor
        run: npx expo-doctor

      - name: Append to gradle.properties
        # This step updates android/gradle.properties with your secrets.
        # Gradle will read these values during the build process.
        run: |
          mkdir -p android # Ensure the directory exists
          echo "MYAPP_UPLOAD_STORE_FILE=my-release-key.keystore" >> android/gradle.properties
          echo "MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.MYAPP_UPLOAD_KEY_ALIAS }}" >> android/gradle.properties
          echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.MYAPP_UPLOAD_STORE_PASSWORD }}" >> android/gradle.properties
          echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.MYAPP_UPLOAD_KEY_PASSWORD }}" >> android/gradle.properties

      - name: Create Keystore file
        env:
          MYAPP_UPLOAD_KEYSTORE_BASE64: ${{ secrets.MYAPP_UPLOAD_KEYSTORE_BASE64 }}
        run: |
          mkdir -p android/app # Ensure the directory exists within the newly generated project
          echo "$MYAPP_UPLOAD_KEYSTORE_BASE64" | base64 --decode > android/app/my-release-key.keystore

      - name: Run Node.js script to modify build.gradle
        # This executes your Node.js script to insert the signing configurations.
        run: node scripts/Step6Fix.js 

      - name: Build Android Release APK
        run: |
          cd android
          ./gradlew clean assembleRelease

      - name: Upload Release APK
        # This uploads the generated APK as a workflow artifact, making it downloadable.
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: android/app/build/outputs/apk/release/*.apk
          retention-days: 5